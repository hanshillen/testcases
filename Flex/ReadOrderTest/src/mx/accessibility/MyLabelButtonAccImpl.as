package mx.accessibility
{
    import flash.accessibility.Accessibility;
    import flash.accessibility.AccessibilityProperties;
    import flash.display.DisplayObject;
    import flash.events.Event;
    import flash.events.FocusEvent;
    import flash.text.TextField;
    
    import mx.controls.Label;
    import mx.controls.MyLabelButton;
    import mx.core.IUITextField;
    import mx.core.UIComponent;
    import mx.core.UITextField;
    import mx.core.mx_internal;
    
    use namespace mx_internal;    
    public class MyLabelButtonAccImpl extends ButtonAccImpl
    {   
        private var accImplTarget:UIComponent;
        //--------------------------------------------------------------------------
        //
        //  Class methods
        //
        //--------------------------------------------------------------------------
        
        /**
         *  Enables accessibility in the Label class.
         *
         *  <p>This method is called by application startup code
         *  that is autogenerated by the MXML compiler.
         *  Afterwards, when instances of Labels are initialized,
         *  their <code>accessibilityImplementation</code> property
         *  will be set to an instance of this class.</p>
         *
         *  @langversion 3.0
         *  @playerversion Flash 10
         *  @playerversion AIR 1.5
         *  @productversion Flex 4
         */
        public static function enableAccessibility():void
        {
            MyLabelButton.createAccessibilityImplementation =
                createAccessibilityImplementation;
        }
        
        /**
         *  @private
         *  Creates a Label's AccessibilityImplementation object.
         *  This method is called from UIComponent's
         *  initializeAccessibility() method.
         */
        mx_internal static function createAccessibilityImplementation(
            component:UIComponent):void
        {
            var accImplTarget:UIComponent = MyLabelButton(component).getAccImplTarget();
            accImplTarget.accessibilityImplementation =
                new MyLabelButtonAccImpl(component);
        }
        
        public function MyLabelButtonAccImpl(master:UIComponent)
        {
            super(master);
            accImplTarget = MyLabelButton(master).getAccImplTarget();
            var textField:IUITextField = MyLabelButton(master).getTextField();
            
            if (!master.accessibilityProperties)
            {
                master.accessibilityProperties = new AccessibilityProperties();
            }
            //master.accessibilityProperties.silent = true;
            master.accessibilityProperties.forceSimple = false;
            //Accessibility.updateProperties();
            if (!textField.accessibilityProperties)
            {
                textField.accessibilityProperties = new AccessibilityProperties();
            }
            textField.accessibilityProperties.silent = true;
            Accessibility.updateProperties();
        }
        
        override protected function get eventsToHandle():Array
        {
            return super.eventsToHandle.concat([FocusEvent.FOCUS_IN]);
        }
        
        //--------------------------------------------------------------------------
        //
        //  Overridden methods: AccImpl
        //
        //--------------------------------------------------------------------------
        
        /**
         *  @private
         *  method for returning the name of the MyLabelButton
         *  which is spoken out by the screen reader
         *  The Button should return the label inside as the name of the Button.
         *  The name returned here would take precedence over the name
         *  specified in the accessibility panel.
         *
         *  @param childID uint
         *
         *  @return Name String
         */
        override protected function getName(childID:uint):String
        {
            var label:String = MyLabelButton(master).text;
            
            return label != null && label != "" ? label : "";
        }
        
        override public function get_accState(childID:uint):uint
        {
            return getState(childID);    
        }
        
        override protected function eventHandler(event:Event):void
        {
            super.eventHandler(event);
            switch (event.type) {
                case FocusEvent.FOCUS_IN:
                    Accessibility.sendEvent(DisplayObject(accImplTarget), 0, AccConst.EVENT_OBJECT_FOCUS); 
                    break;
            }
        }
    }
}